import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect();
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç prisma db push)
    console.log('üìã –°–æ–∑–¥–∞—é —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ raw SQL
    await createDatabaseSchema();
    
    console.log('‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');

    // –®–∞–≥ 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...');
    await initializeData();
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

    return NextResponse.json({
      success: true,
      message: 'Database setup completed successfully!',
      steps: [
        '‚úÖ Database connection established',
        '‚úÖ Database schema created',
        '‚úÖ Initial data populated'
      ],
      login: {
        email: 'admin@technomart.ru',
        password: 'Admin123!'
      },
      nextSteps: [
        '1. Visit your site homepage',
        '2. Login with admin credentials',
        '3. Start using the application'
      ]
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: 'Database setup failed', 
        details: error instanceof Error ? error.message : 'Unknown error' 
      },
      { status: 500 }
    );
  }
}

async function createDatabaseSchema() {
  // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
  await prisma.$executeRaw`
    CREATE TABLE IF NOT EXISTS "users" (
      "id" TEXT NOT NULL,
      "email" TEXT NOT NULL,
      "username" TEXT NOT NULL,
      "firstName" TEXT,
      "lastName" TEXT,
      "phone" TEXT,
      "address" TEXT,
      "isAdmin" BOOLEAN NOT NULL DEFAULT false,
      "isActive" BOOLEAN NOT NULL DEFAULT true,
      "password" TEXT NOT NULL,
      "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
      "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
      CONSTRAINT "users_pkey" PRIMARY KEY ("id")
    );
  `;

  await prisma.$executeRaw`
    CREATE TABLE IF NOT EXISTS "categories" (
      "id" TEXT NOT NULL,
      "name" TEXT NOT NULL,
      "slug" TEXT NOT NULL,
      "description" TEXT,
      "image" TEXT,
      "parentId" TEXT,
      "isActive" BOOLEAN NOT NULL DEFAULT true,
      "sortOrder" INTEGER NOT NULL DEFAULT 0,
      "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
      "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
      CONSTRAINT "categories_pkey" PRIMARY KEY ("id")
    );
  `;

  await prisma.$executeRaw`
    CREATE TABLE IF NOT EXISTS "brands" (
      "id" TEXT NOT NULL,
      "name" TEXT NOT NULL,
      "slug" TEXT NOT NULL,
      "description" TEXT,
      "logo" TEXT,
      "website" TEXT,
      "isActive" BOOLEAN NOT NULL DEFAULT true,
      "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
      "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
      CONSTRAINT "brands_pkey" PRIMARY KEY ("id")
    );
  `;

  await prisma.$executeRaw`
    CREATE TABLE IF NOT EXISTS "products" (
      "id" TEXT NOT NULL,
      "name" TEXT NOT NULL,
      "slug" TEXT NOT NULL,
      "description" TEXT NOT NULL,
      "shortDescription" TEXT,
      "sku" TEXT NOT NULL,
      "price" DOUBLE PRECISION NOT NULL,
      "originalPrice" DOUBLE PRECISION,
      "discount" DOUBLE PRECISION DEFAULT 0,
      "inStock" BOOLEAN NOT NULL DEFAULT true,
      "stockQuantity" INTEGER NOT NULL DEFAULT 0,
      "minQuantity" INTEGER NOT NULL DEFAULT 1,
      "categoryId" TEXT NOT NULL,
      "brandId" TEXT,
      "metaTitle" TEXT,
      "metaDescription" TEXT,
      "keywords" TEXT[],
      "isActive" BOOLEAN NOT NULL DEFAULT true,
      "isFeatured" BOOLEAN NOT NULL DEFAULT false,
      "isNew" BOOLEAN NOT NULL DEFAULT false,
      "isHot" BOOLEAN NOT NULL DEFAULT false,
      "averageRating" DOUBLE PRECISION NOT NULL DEFAULT 0,
      "totalReviews" INTEGER NOT NULL DEFAULT 0,
      "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
      "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
      CONSTRAINT "products_pkey" PRIMARY KEY ("id")
    );
  `;

  await prisma.$executeRaw`
    CREATE TABLE IF NOT EXISTS "cart_items" (
      "id" TEXT NOT NULL,
      "userId" TEXT,
      "sessionId" TEXT,
      "productId" TEXT NOT NULL,
      "quantity" INTEGER NOT NULL,
      "price" DOUBLE PRECISION NOT NULL,
      "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
      "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
      CONSTRAINT "cart_items_pkey" PRIMARY KEY ("id")
    );
  `;

  await prisma.$executeRaw`
    CREATE TABLE IF NOT EXISTS "wishlist_items" (
      "id" TEXT NOT NULL,
      "userId" TEXT NOT NULL,
      "productId" TEXT NOT NULL,
      "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
      "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
      CONSTRAINT "wishlist_items_pkey" PRIMARY KEY ("id")
    );
  `;

  await prisma.$executeRaw`
    CREATE TABLE IF NOT EXISTS "compare_items" (
      "id" TEXT NOT NULL,
      "userId" TEXT NOT NULL,
      "productId" TEXT NOT NULL,
      "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
      "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
      CONSTRAINT "compare_items_pkey" PRIMARY KEY ("id")
    );
  `;

  // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
  await prisma.$executeRaw`
    CREATE UNIQUE INDEX IF NOT EXISTS "users_email_key" ON "users"("email");
  `;
  
  await prisma.$executeRaw`
    CREATE UNIQUE INDEX IF NOT EXISTS "users_username_key" ON "users"("username");
  `;
  
  await prisma.$executeRaw`
    CREATE UNIQUE INDEX IF NOT EXISTS "categories_slug_key" ON "categories"("slug");
  `;
  
  await prisma.$executeRaw`
    CREATE UNIQUE INDEX IF NOT EXISTS "brands_slug_key" ON "brands"("slug");
  `;
  
  await prisma.$executeRaw`
    CREATE UNIQUE INDEX IF NOT EXISTS "products_slug_key" ON "products"("slug");
  `;
  
  await prisma.$executeRaw`
    CREATE UNIQUE INDEX IF NOT EXISTS "products_sku_key" ON "products"("sku");
  `;

  await prisma.$executeRaw`
    CREATE UNIQUE INDEX IF NOT EXISTS "wishlist_items_userId_productId_key" ON "wishlist_items"("userId", "productId");
  `;

  await prisma.$executeRaw`
    CREATE UNIQUE INDEX IF NOT EXISTS "compare_items_userId_productId_key" ON "compare_items"("userId", "productId");
  `;
}

async function initializeData() {
  // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const adminUser = await prisma.user.upsert({
    where: { email: 'admin@technomart.ru' },
    update: {},
    create: {
      id: 'admin-user-id',
      email: 'admin@technomart.ru',
      username: 'admin',
      firstName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      lastName: '–°–∏—Å—Ç–µ–º—ã',
      password: '$2a$10$8K4l3rGxY3vQ2Qc1nWlZTeGtBw8UmYqC5jxK6W3zR7tN2M9eX8a7e', // Admin123!
      isAdmin: true,
      isActive: true
    }
  });

  // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const regularUser = await prisma.user.upsert({
    where: { email: 'user@technomart.ru' },
    update: {},
    create: {
      id: 'regular-user-id',
      email: 'user@technomart.ru',
      username: 'user',
      firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      lastName: '–¢–µ—Å—Ç–æ–≤—ã–π',
      password: '$2a$10$8K4l3rGxY3vQ2Qc1nWlZTeGtBw8UmYqC5jxK6W3zR7tN2M9eX8a7e', // User123!
      isAdmin: false,
      isActive: true
    }
  });

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categories = await Promise.all([
    prisma.category.upsert({
      where: { slug: 'smartfony' },
      update: {},
      create: {
        id: 'cat-1',
        name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã',
        slug: 'smartfony',
        description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–æ–≤',
        isActive: true,
        sortOrder: 1
      }
    }),
    prisma.category.upsert({
      where: { slug: 'noutbuki' },
      update: {},
      create: {
        id: 'cat-2',
        name: '–ù–æ—É—Ç–±—É–∫–∏',
        slug: 'noutbuki',
        description: '–ù–æ—É—Ç–±—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –∏–≥—Ä',
        isActive: true,
        sortOrder: 2
      }
    }),
    prisma.category.upsert({
      where: { slug: 'televizory' },
      update: {},
      create: {
        id: 'cat-3',
        name: '–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã',
        slug: 'televizory',
        description: 'Smart TV –∏ –æ–±—ã—á–Ω—ã–µ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä—ã',
        isActive: true,
        sortOrder: 3
      }
    })
  ]);

  // –°–æ–∑–¥–∞–µ–º –±—Ä–µ–Ω–¥—ã
  const brands = await Promise.all([
    prisma.brand.upsert({
      where: { slug: 'apple' },
      update: {},
      create: {
        id: 'brand-1',
        name: 'Apple',
        slug: 'apple',
        description: '–ü—Ä–æ–¥—É–∫—Ü–∏—è Apple',
        isActive: true
      }
    }),
    prisma.brand.upsert({
      where: { slug: 'samsung' },
      update: {},
      create: {
        id: 'brand-2',
        name: 'Samsung',
        slug: 'samsung',
        description: '–ü—Ä–æ–¥—É–∫—Ü–∏—è Samsung',
        isActive: true
      }
    }),
    prisma.brand.upsert({
      where: { slug: 'lg' },
      update: {},
      create: {
        id: 'brand-3',
        name: 'LG',
        slug: 'lg',
        description: '–ü—Ä–æ–¥—É–∫—Ü–∏—è LG',
        isActive: true
      }
    })
  ]);

  // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
  const products = await Promise.all([
    prisma.product.upsert({
      where: { slug: 'iphone-15-pro' },
      update: {},
      create: {
        id: 'prod-1',
        name: 'iPhone 15 Pro',
        slug: 'iphone-15-pro',
        description: '–ù–æ–≤–µ–π—à–∏–π iPhone —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º A17 Pro',
        shortDescription: '–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Apple',
        sku: 'IPH15PRO',
        price: 89990,
        originalPrice: 99990,
        discount: 10,
        categoryId: 'cat-1',
        brandId: 'brand-1',
        inStock: true,
        stockQuantity: 50,
        isActive: true,
        isFeatured: true,
        isNew: true
      }
    }),
    prisma.product.upsert({
      where: { slug: 'macbook-air-m2' },
      update: {},
      create: {
        id: 'prod-2',
        name: 'MacBook Air M2',
        slug: 'macbook-air-m2',
        description: '–ù–æ—É—Ç–±—É–∫ Apple MacBook Air —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º M2',
        shortDescription: '–¢–æ–Ω–∫–∏–π –∏ –º–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫',
        sku: 'MBAIRM2',
        price: 119990,
        categoryId: 'cat-2',
        brandId: 'brand-1',
        inStock: true,
        stockQuantity: 30,
        isActive: true,
        isFeatured: true
      }
    }),
    prisma.product.upsert({
      where: { slug: 'samsung-galaxy-s24' },
      update: {},
      create: {
        id: 'prod-3',
        name: 'Samsung Galaxy S24',
        slug: 'samsung-galaxy-s24',
        description: '–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Samsung Galaxy S24',
        shortDescription: '–°–º–∞—Ä—Ç—Ñ–æ–Ω —Å –ò–ò-—Ñ—É–Ω–∫—Ü–∏—è–º–∏',
        sku: 'SAMS24',
        price: 79990,
        categoryId: 'cat-1',
        brandId: 'brand-2',
        inStock: true,
        stockQuantity: 40,
        isActive: true,
        isHot: true
      }
    })
  ]);

  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã:', {
    users: 2,
    categories: categories.length,
    brands: brands.length,
    products: products.length
  });
}

export async function GET() {
  return NextResponse.json({
    message: 'Database setup endpoint',
    usage: 'Send POST request to setup database',
    steps: [
      '1. Creates database schema',
      '2. Initializes data',
      '3. Returns login credentials'
    ]
  });
} 